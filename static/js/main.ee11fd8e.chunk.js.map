{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","redux/blockchain/blockchainActions.js","styles/globalStyles.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","loading","account","smartContract","web3","errorMsg","blockchainReducer","state","action","type","payload","totalSupply","cost","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","call","console","log","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","rpc","connectFailed","updateAccount","Screen","styled","div","image","SpacerSmall","SpacerMedium","SpacerLarge","Container","flex","fd","jc","ai","test","TextTitle","p","TextDescription","BigTextTitle","StyledButton","button","StyledRoundButton","ResponsiveWrapper","StyledImg","img","StyledLink","App","useDispatch","useSelector","useState","claimingNft","setClaimingNft","feedback","setFeedback","mintAmount","setMintAmount","Cost","setCost","CONTRACT_ADDRESS","SCAN_LINK","NETWORK","NAME","SYMBOL","ID","NFT_NAME","MAX_SUPPLY","WEI_COST","DISPLAY_COST","GAS_LIMIT","MARKETPLACE","MARKETPLACE_LINK","SHOW_BACKGROUND","CONFIG","SET_CONFIG","useEffect","input","len","CCost","String","getData","getConfig","fetch","headers","Accept","configResponse","json","config","style","padding","backgroundColor","textAlign","fontSize","fontWeight","color","target","href","borderRadius","border","boxShadow","maxWidth","alt","src","length","substring","Number","onClick","e","preventDefault","abiResponse","abi","web3Modal","Web3Modal","cacheProvider","connect","provider","Web3","Web3EthContract","setProvider","eth","getChainId","networkId","getAccounts","accounts","SmartContractObj","on","chainId","window","location","reload","lineHeight","disabled","newMintAmount","decrementMintAmount","incrementMintAmount","totalCostWei","mint","send","to","from","value","once","err","then","receipt","claimNFTs","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee11fd8e.chunk.js","sourcesContent":["const initialState = {\r\n  loading: false,\r\n  account: null,\r\n  smartContract: null,\r\n  web3: null,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst blockchainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CONNECTION_REQUEST\":\r\n      return {\r\n        ...initialState,\r\n        loading: true,\r\n      };\r\n    case \"CONNECTION_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        account: action.payload.account,\r\n        smartContract: action.payload.smartContract,\r\n        web3: action.payload.web3,\r\n      };\r\n    case \"CONNECTION_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        errorMsg: action.payload,\r\n      };\r\n    case \"UPDATE_ACCOUNT\":\r\n      return {\r\n        ...state,\r\n        account: action.payload.account,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default blockchainReducer;\r\n","const initialState = {\r\n  loading: false,\r\n  totalSupply: 0,\r\n  cost: 0,\r\n  error: false,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst dataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHECK_DATA_REQUEST\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: false,\r\n        errorMsg: \"\",\r\n      };\r\n    case \"CHECK_DATA_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        totalSupply: action.payload.totalSupply,\r\n        // cost: action.payload.cost,\r\n        error: false,\r\n        errorMsg: \"\",\r\n      };\r\n    case \"CHECK_DATA_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        error: true,\r\n        errorMsg: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default dataReducer;\r\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\r\nimport dataReducer from \"./data/dataReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  blockchain: blockchainReducer,\r\n  data: dataReducer,\r\n});\r\n\r\nconst middleware = [thunk];\r\nconst composeEnhancers = compose(applyMiddleware(...middleware));\r\n\r\nconst configureStore = () => {\r\n  return createStore(rootReducer, composeEnhancers);\r\n};\r\n\r\nconst store = configureStore();\r\n\r\nexport default store;\r\n","// log\r\nimport store from \"../store\";\r\n\r\nconst fetchDataRequest = () => {\r\n  return {\r\n    type: \"CHECK_DATA_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst fetchDataFailed = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const fetchData = () => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchDataRequest());\r\n    try {\r\n      let totalSupply = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.totalSupply()\r\n        .call();\r\n      // let cost = await store\r\n      //   .getState()\r\n      //   .blockchain.smartContract.methods.cost()\r\n      //   .call();\r\n\r\n      dispatch(\r\n        fetchDataSuccess({\r\n          totalSupply,\r\n          // cost,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\r\n    }\r\n  };\r\n};\r\n","// constants\r\nimport Web3EthContract from \"web3-eth-contract\";\r\nimport Web3 from \"web3\";\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n// log\r\nimport { fetchData } from \"../data/dataActions\";\r\n\r\nconst providerOptions = {\r\n  walletconnect: {\r\n    package: WalletConnectProvider,\r\n\r\n    options: {\r\n      // Mikko's test key - don't copy as your mileage may vary\r\n      infuraId: \"8043bb2cf99347b1bfadfb233c5325c0\",\r\n      rpc: {\r\n        56: \"https://bsc-dataseed.binance.org/\",\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst connectRequest = () => {\r\n  return {\r\n    type: \"CONNECTION_REQUEST\",\r\n  };\r\n};\r\n\r\nconst connectSuccess = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n  return {\r\n    type: \"UPDATE_ACCOUNT\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const connect = () => {\r\n  return async (dispatch) => {\r\n    dispatch(connectRequest());\r\n    const abiResponse = await fetch(\"/config/abi.json\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    });\r\n    const abi = await abiResponse.json();\r\n    const configResponse = await fetch(\"/config/config.json\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    });\r\n    const CONFIG = await configResponse.json();\r\n    \r\n    let web3Modal = new Web3Modal({\r\n      cacheProvider: false, // optional\r\n      providerOptions, // required\r\n      // disableInjectedProvider: true, // optional. For MetaMask / Brave / Opera.\r\n    });\r\n    let provider;\r\n    try {\r\n      provider = await web3Modal.connect();\r\n    } catch (e) {\r\n      console.log(\"Could not get a wallet connection\", e);\r\n      return;\r\n    }\r\n\r\n    const web3 = new Web3(provider);\r\n\r\n    Web3EthContract.setProvider(provider);\r\n    try {\r\n      const networkId = await web3.eth.getChainId();\r\n      const accounts = await web3.eth.getAccounts();\r\n      if (networkId == CONFIG.NETWORK.ID) {\r\n        const SmartContractObj = new Web3EthContract(\r\n          abi,\r\n          CONFIG.CONTRACT_ADDRESS\r\n        );\r\n\r\n        dispatch(\r\n          connectSuccess({\r\n            account: accounts[0],\r\n            smartContract: SmartContractObj,\r\n            web3: web3,\r\n          })\r\n        );\r\n\r\n        // Add listeners start\r\n        provider.on(\"accountsChanged\", (accounts) => {\r\n          dispatch(updateAccount(accounts[0]));\r\n        });        \r\n        provider.on(\"chainChanged\", (chainId) => {\r\n          window.location.reload();\r\n        });      } else {\r\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\r\n      }\r\n    } catch (err) {\r\n      dispatch(connectFailed(\"Something went wrong.\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAccount = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(updateAccountRequest({ account: account }));\r\n    dispatch(fetchData(account));\r\n  };\r\n};","import styled from \"styled-components\";\r\n\r\n// Used for wrapping a page component\r\nexport const Screen = styled.div`\r\n  background-color: var(--primary);\r\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\r\n  background-size: cover;\r\n  background-position: center;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\n// Used for providing space between components\r\nexport const SpacerXSmall = styled.div`\r\n  height: 8px;\r\n  width: 8px;\r\n`;\r\n\r\n// Used for providing space between components\r\nexport const SpacerSmall = styled.div`\r\n  height: 16px;\r\n  width: 16px;\r\n`;\r\n\r\n// Used for providing space between components\r\nexport const SpacerMedium = styled.div`\r\n  height: 24px;\r\n  width: 24px;\r\n`;\r\n\r\n// Used for providing space between components\r\nexport const SpacerLarge = styled.div`\r\n  height: 32px;\r\n  width: 32px;\r\n`;\r\n\r\n// Used for providing a wrapper around a component\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex: ${({ flex }) => (flex ? flex : 0)};\r\n  flex-direction: ${({ fd }) => (fd ? fd : \"column\")};\r\n  justify-content: ${({ jc }) => (jc ? jc : \"flex-start\")};\r\n  align-items: ${({ ai }) => (ai ? ai : \"flex-start\")};\r\n  background-color: ${({ test }) => (test ? \"pink\" : \"none\")};\r\n  width: 100%;\r\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\r\n  background-size: cover;\r\n  background-position: center;\r\n`;\r\n\r\nexport const TextTitle = styled.p`\r\n  color: var(--primary-text);\r\n  font-size: 22px;\r\n  font-weight: 500;\r\n  line-height: 1.6;\r\n  @media (max-width: 400px) {\r\n    font-size: 10px;\r\n  }\r\n  @media (max-width: 714px) {\r\n    font-size: 15px;\r\n  }\r\n`;\r\n\r\nexport const TextSubTitle = styled.p`\r\n  color: var(--primary-text);\r\n  font-size: 18px;\r\n\r\n  line-height: 1.6;\r\n  word-break: break-all;\r\n  white-space: break-spaces;\r\n  @media (max-width: 400px) {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nexport const TextDescription = styled.p`\r\n  color: var(--primary-text);\r\n  font-size: 16px;\r\n  line-height: 1.6;\r\n`;\r\n\r\nexport const StyledClickable = styled.div`\r\n  :active {\r\n    opacity: 0.6;\r\n  }\r\n`;\r\n\r\nexport const BigTextTitle = styled.p`\r\n  color: var(--primary-text);\r\n  font-size: 50px;\r\n  font-weight: 600;\r\n  line-height: 1.6;\r\n  word-break: break-all;\r\n  white-space: break-spaces;\r\n  @media (max-width: 600px) {\r\n    font-size: 40px;\r\n  }\r\n  @media (max-width: 380px) {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { connect } from \"./redux/blockchain/blockchainActions\";\r\nimport { fetchData } from \"./redux/data/dataActions\";\r\nimport * as s from \"./styles/globalStyles\";\r\nimport styled from \"styled-components\";\r\n\r\nconst truncate = (input, len) =>\r\n  input.length > len ? `${input.substring(0, len)}...` : input;\r\n\r\nexport const StyledButton = styled.button`\r\n  padding: 10px;\r\n  border-radius: 20px;\r\n  border: none;\r\n  background-color: var(--blue);\r\n  padding: 10px;\r\n  font-weight: bold;\r\n  color: var(--accent-text);\r\n  width: 100px;\r\n  cursor: pointer;\r\n\r\n  }\r\n`;\r\n\r\nexport const StyledRoundButton = styled.button`\r\n  padding: 10px;\r\n  border-radius: 30%;\r\n  border: none;\r\n  background-color: var(--hotpink);\r\n  padding: 10px;\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n  color: var(--accent-text);\r\n  width: 30px;\r\n  height: 30px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  }\r\n`;\r\n\r\nexport const ResponsiveWrapper = styled.div`\r\n  display: flex;\r\n  flex: ${({ flex }) => (flex ? flex : 0)};\r\n  flex-direction: column;\r\n  justify-content: stretched;\r\n  // align-items: stretched;\r\n  width: 100%;\r\n  @media (min-width: 767px) {\r\n    flex-direction: row;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport const StyledLogo = styled.img`\r\n  width: 200px;\r\n  @media (min-width: 767px) {\r\n    width: 300px;\r\n  }\r\n  transition: width 0.5s;\r\n  transition: height 0.5s;\r\n`;\r\n\r\nexport const StyledImg = styled.img`\r\n  box-shadow: 0px 5px 11px 2px rgba(0, 0, 0, 0.7);\r\n  background-color: var(--accent);\r\n  border-radius: 20%;\r\n  width: 200px;\r\n  @media (min-width: 200px) {\r\n    width: 130px;\r\n  }\r\n  @media (min-width: 600px) {\r\n    width: 250px;\r\n  }\r\n  @media (min-width: 1000px) {\r\n    width: 250px;\r\n  }\r\n  transition: width 0.5s;\r\n`;\r\n\r\nexport const StyledLink = styled.a`\r\n  color: var(--secondary);\r\n  text-decoration: none;\r\n  word-break: break-all;\r\n  white-space: break-spaces;\r\n`;\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  const [claimingNft, setClaimingNft] = useState(false);\r\n  const [feedback, setFeedback] = useState(`Click buy to mint your NFT.`);\r\n  const [mintAmount, setMintAmount] = useState(1);\r\n  const [Cost, setCost] = useState(1);\r\n  const [CONFIG, SET_CONFIG] = useState({\r\n    CONTRACT_ADDRESS: \"\",\r\n    SCAN_LINK: \"\",\r\n    NETWORK: {\r\n      NAME: \"\",\r\n      SYMBOL: \"\",\r\n      ID: 0,\r\n    },\r\n    NFT_NAME: \"\",\r\n    SYMBOL: \"\",\r\n    MAX_SUPPLY: 1,\r\n    WEI_COST: 0,\r\n    DISPLAY_COST: 0,\r\n    GAS_LIMIT: 0,\r\n    MARKETPLACE: \"\",\r\n    MARKETPLACE_LINK: \"\",\r\n    SHOW_BACKGROUND: false,\r\n  });\r\n\r\n  useEffect(async () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      const Cost = await blockchain.smartContract.methods\r\n        .cost()\r\n        .call();\r\n      setCost(Cost);\r\n    }\r\n  }, [blockchain]);\r\n\r\n  const CCost = String(Cost/10**18);\r\n\r\n  const claimNFTs = () => {\r\n    let cost = Cost;\r\n    let totalCostWei = String(cost * mintAmount);\r\n    setFeedback(`Minting your ${CONFIG.NFT_NAME}...`);\r\n    setClaimingNft(true);\r\n    blockchain.smartContract.methods\r\n      .mint(mintAmount)\r\n      .send({\r\n        to: CONFIG.CONTRACT_ADDRESS,\r\n        from: blockchain.account,\r\n        value: totalCostWei,\r\n      })\r\n      .once(\"error\", (err) => {\r\n        console.log(err);\r\n        setFeedback(\"Sorry, something went wrong please try again later.\");\r\n        setClaimingNft(false);\r\n      })\r\n      .then((receipt) => {\r\n        console.log(receipt);\r\n        setFeedback(\r\n          `WOW, the ${CONFIG.NFT_NAME} is yours! go visit Opensea.io to view it.`\r\n        );\r\n        setClaimingNft(false);\r\n        dispatch(fetchData(blockchain.account));\r\n      });\r\n  };\r\n  \r\n\r\n  const decrementMintAmount = () => {\r\n    let newMintAmount = mintAmount - 1;\r\n    if (newMintAmount < 1) {\r\n      newMintAmount = 1;\r\n    }\r\n    setMintAmount(newMintAmount);\r\n  };\r\n\r\n  const incrementMintAmount = () => {\r\n    let newMintAmount = mintAmount + 1;\r\n    if (newMintAmount > 50) {\r\n      newMintAmount = 50;\r\n    }\r\n    setMintAmount(newMintAmount);\r\n  };\r\n\r\n\r\n\r\n  const getData = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      dispatch(fetchData(blockchain.account));\r\n    }\r\n  };\r\n\r\n  const getConfig = async () => {\r\n    const configResponse = await fetch(\"/config/config.json\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    });\r\n    const config = await configResponse.json();\r\n    SET_CONFIG(config);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getConfig();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [blockchain.account]);\r\n\r\n  return (\r\n    <s.Screen>\r\n      <s.Container\r\n        flex={1}\r\n        ai={\"center\"}\r\n        style={{ padding: 24, backgroundColor: \"var(--yellow)\" }}\r\n        image={CONFIG.SHOW_BACKGROUND ? \"/config/images/bg.png\" : null}\r\n      >\r\n\r\n        <s.SpacerSmall />\r\n        <ResponsiveWrapper>\r\n          <StyledLink\r\n            style={{\r\n              textAlign: \"center\",\r\n              fontSize: 40,\r\n              fontWeight: \"bold\",\r\n              color: \"var(--primary)\",\r\n            }}\r\n            target={\"_self\"}\r\n            href={\"https://linktr.ee/DefiBears\"}\r\n          >\r\n            Linktr.ee\r\n          </StyledLink>{\" \"}\r\n        </ResponsiveWrapper>\r\n        <ResponsiveWrapper flex={1} style={{ padding: 24 }} test>\r\n\r\n          <s.Container\r\n            flex={2}\r\n            ai={\"center\"}\r\n            style={{\r\n              backgroundColor: \"var(--background)\",\r\n              padding: 20,\r\n              borderRadius: 24,\r\n              border: \"4px var(--blue)\",\r\n              boxShadow: \"0px 5px 11px 2px rgba(0,0,0,0.7)\",\r\n              maxWidth: \"800px\",\r\n            }}\r\n          >\r\n                      <StyledImg alt={\"image0\"} src={\"/config/images/image0.png\"}/>\r\n                      <s.SpacerLarge/>\r\n            <s.BigTextTitle\r\n              style={{\r\n                textAlign: \"center\",\r\n                fontWeight: \"bold\",\r\n                color: \"var(--accent-text)\",\r\n              }}\r\n            >\r\n              {data.totalSupply} / {CONFIG.MAX_SUPPLY}\r\n            </s.BigTextTitle>\r\n            <s.TextDescription\r\n              style={{\r\n                textAlign: \"center\",\r\n                color: \"var(--primary-text)\",\r\n              }}\r\n            >\r\n              <StyledLink target={\"_blank\"} href={CONFIG.SCAN_LINK}>\r\n                {truncate(CONFIG.CONTRACT_ADDRESS, 15)}\r\n              </StyledLink>\r\n            </s.TextDescription>\r\n            <s.SpacerSmall />\r\n            {Number(data.totalSupply) >= CONFIG.MAX_SUPPLY ? (\r\n              <>\r\n                <s.TextTitle\r\n                  style={{ textAlign: \"center\", color: \"var(--accent-text)\" }}\r\n                >\r\n                  The sale has ended.\r\n                </s.TextTitle>\r\n                <s.TextDescription\r\n                  style={{ textAlign: \"center\", color: \"var(--accent-text)\" }}\r\n                >\r\n                  You can still find {CONFIG.NFT_NAME} on\r\n                </s.TextDescription>\r\n                <s.SpacerSmall />\r\n                <StyledLink target={\"_blank\"} href={CONFIG.MARKETPLACE_LINK}>\r\n                  {CONFIG.MARKETPLACE}\r\n                </StyledLink>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <s.TextTitle\r\n                  style={{ textAlign: \"center\", color: \"var(--accent-text)\" }}\r\n                >\r\n                  1 {CONFIG.SYMBOL} costs {CCost} BNB, 50 NFTs can be minted at once\r\n                </s.TextTitle>\r\n                <s.SpacerSmall />\r\n                {blockchain.account === \"\" ||\r\n                blockchain.smartContract === null ? (\r\n                  <s.Container ai={\"center\"} jc={\"center\"}>\r\n                    <s.TextDescription\r\n                      style={{\r\n                        textAlign: \"center\",\r\n                        color: \"var(--accent-text)\",\r\n                      }}\r\n                    >\r\n                      Please connect to the {CONFIG.NETWORK.NAME} network\r\n                    </s.TextDescription>\r\n                    <s.SpacerSmall />\r\n                    <StyledButton\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        dispatch(connect());\r\n                        getData();\r\n                      }}\r\n                    >\r\n                      CONNECT\r\n                    </StyledButton>\r\n                    {blockchain.errorMsg !== \"\" ? (\r\n                      <>\r\n                        <s.SpacerSmall />\r\n                        <s.TextDescription\r\n                          style={{\r\n                            textAlign: \"center\",\r\n                            color: \"var(--accent-text)\",\r\n                          }}\r\n                        >\r\n                          {blockchain.errorMsg}\r\n                        </s.TextDescription>\r\n                      </>\r\n                    ) : null}\r\n                  </s.Container>\r\n                ) : (\r\n                  <>\r\n                    <s.TextDescription\r\n                      style={{\r\n                        textAlign: \"center\",\r\n                        color: \"var(--accent-text)\",\r\n                      }}\r\n                    >\r\n                      {feedback}\r\n                    </s.TextDescription>\r\n                    <s.SpacerMedium />\r\n                    <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\r\n                    <StyledRoundButton\r\n                        style={{ lineHeight: 0.4 }}\r\n                        disabled={claimingNft ? 1 : 0}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          decrementMintAmount();\r\n                        }}\r\n                      >\r\n                        -\r\n                      </StyledRoundButton>\r\n                      <s.SpacerMedium />\r\n                      <s.TextDescription\r\n                        style={{\r\n                          textAlign: \"center\",\r\n                          color: \"var(--accent-text)\", fontSize: 30\r\n                        }}\r\n                      >\r\n                        {mintAmount}\r\n                      </s.TextDescription>\r\n                      <s.SpacerMedium />\r\n                      <StyledRoundButton\r\n                        disabled={claimingNft ? 1 : 0}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          incrementMintAmount();\r\n                        }}\r\n                      >\r\n                        +\r\n                      </StyledRoundButton>\r\n                    </s.Container>\r\n                    <s.SpacerSmall />\r\n                    <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\r\n                      <StyledButton\r\n                        disabled={claimingNft ? 1 : 0}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          claimNFTs();\r\n                          getData();\r\n                        }}\r\n                      >\r\n                        {claimingNft ? \"Minting...\" : \"Mint\"}\r\n                      </StyledButton>\r\n\r\n                    </s.Container>\r\n                    \r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n            <s.SpacerMedium />\r\n          </s.Container>\r\n          <s.SpacerLarge />\r\n        </ResponsiveWrapper>\r\n        <s.SpacerMedium />\r\n        <s.Container jc={\"center\"} ai={\"center\"} style={{ width: \"70%\" }}>\r\n          <s.TextDescription\r\n            style={{\r\n              textAlign: \"center\",\r\n              color: \"var(--primary-text)\",\r\n            }}\r\n          >\r\n            Please make sure you are connected to the right network (\r\n            {CONFIG.NETWORK.NAME} Mainnet)\r\n          </s.TextDescription>\r\n          <s.SpacerSmall />\r\n        </s.Container>\r\n      </s.Container>\r\n    </s.Screen>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./styles/reset.css\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}